##########################################################################################

# It is advised to use the start_gcode from Happy Hare. Then you will be able to fully 
# and efficiently use this mod. Check the Happy Hare document at gcode_preprocessing.md 
# in the Happy Hare github for more details.

###################################### DISCLAIMER ########################################

# You, and you alone, are responsible for the correct execution of these macros and 
# gcodes. Any damage that may occur to your machine remains your responsibility. 
# Especially when executing this macro for the first few times, keep an eye on your 
# printer and the 
# emergency stop.

##########################################################################################

##########################################################################################
# Main macro. Usually you should only need to call this one or place it in the Happy Hare
# _MMU_POST_LOAD macro using the variable_user_post_load_extension:
#
# variable_user_post_load_extension : `RPMR`
#
# Notes on parameters:
# PURGE_LENGTH=[float] (optional) The length to purge. If omitted (default) it will check
#                      the purge_volumes matrix or variable_purge_length. This can be used
#                      to override and for testing.
#
[gcode_macro RPMR]
# These parameters define your filament purging.
# Note that the control of retraction is set in 'mmu_macro_vars.cfg' which can be increased
# if you experience excessive oozing.
variable_purge_spd: 400                 # Speed, in mm/min, of the purge.
variable_purge_temp_min: 200            # Minimum nozzle purge temperature.

# These parameters define your scrubbing, travel speeds, safe z clearance and how many
# times you want to flick. Update as necessary.
variable_travel_spd_xy:      6000         # Travel speed along x-axis in mm/min.
variable_travel_spd_z:       1500         # Travel speed along z axis in mm/min.
variable_flick_qty:             2         # Number of flicks.
variable_flick_spd_x:       12000         # Nozzle wipe speed in mm/min.
variable_flick_dwell_time:    100

# The acceleration to use when using the flick action. If set to 0, it uses the already 
# set acceleration. However, in some cases this is not desirable for the last motion 
# could be an 'outer contour' acceleration which is usually lower.
variable_flick_accel: 0

# RPMR sends the toolhead to the maximum x position during purge operations.
# This can cause issues when skew correction is set up. 
# If you have skew correction enabled and get 'move out of range' errors 
# regarding RPMR while skew is enabled, try increasing this value. Keep the 
# adjustments small though! (0.1mm - 0.5mm) and increase it until it works.
# TODO set to 0, candidate for removal
variable_skew_correction: 0.0

# Location of where to purge, and the pull-off position for flicking.
variable_purge_x: 254.8
variable_flick_x: 243

# Z distance to safely clear the RPM mechanism 
variable_rpm_z_clearance: 16


# ========================================================================================
# ==================== BLOB TUNING =======================================================
# ========================================================================================

# Dwell time (ms) after purging and before flicking to relieve pressure from the nozzle.
variable_pressure_release_time: 1000

# Set the part cooling fan speed. Disabling can help prevent the nozzle from cooling down 
# and stimulate flow, Enabling it can prevent blobs from sticking together. Values range 
# from 0 .. 1, or -1 if you don't want it changed.
#variable_part_cooling_fan: -1              # Leave it unchanged
#variable_part_cooling_fan:  0              # Disable the fan
variable_part_cooling_fan:  1               # Run it at full speed

# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 30

# The maximum amount of filament (in mm) to purge in a single blob. RPMR will 
# automatically purge multiple blobs if the purge amount exceeds this.
variable_purge_length_maximum: 60

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 119

# The slicer values often are a bit too wasteful. Tune it here to get optimal values. 
# 0.6 (60%) is a good starting point.
variable_purge_length_modifier: 0.6

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 0

gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=RPMR_state

  
  # ======================================================================================
  # ==================== CHECK HOMING STATUS =============================================
  # ======================================================================================
  
  {% if "xyz" not in printer.toolhead.homed_axes %}
    RESPOND MSG="RPMR: Not homed! Home xyz before purging"
  {% else %}
    
    # Part cooling fan
    {% if part_cooling_fan >= 0 %}
      # Save the part cooling fan speed to be enabled again later
      {% set backup_fan_speed = printer.fan.speed %}
      # Set part cooling fan speed
      M106 S{part_cooling_fan * 255}
    {% endif %}

    # Set feedrate to 100% for correct speed purging
    {% set backup_feedrate = printer.gcode_move.speed_factor %}
    M220 S100

    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set bl_count = printer['gcode_macro _RPMR_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set restore_z = [printer['gcode_macro RPMR_PARK'].restore_z,pos.z]|max %}

    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
      {action_respond_info("RPMR: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("RPMR: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}

    {% elif pv %} # ============== FETCH FROM HAPPY HARE (LIKELY FROM SLICER) ==============
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("RPMR: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("RPMR: tool(s) unknown. Finding largest value")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("RPMR: Swapped T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section %}

      {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + purge_length_addition %}

    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("RPMR: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
    {% endif %}

    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
    {action_respond_info("RPMR: Purging %dmm of filament" % (purge_len))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}
      
      # ====================================================================================
      # ==================== POSITIONING ON RPM ===========================================
      # ====================================================================================
      
      # TODO correct? top of Z?
      # relative positioning
      G91
      # raise above print/bed
      G1 Z{rpm_z_clearance} F{travel_spd_z}
      # restore absolute
      G90

      # Move over to the tray after z change moved to after heating to minimize exposure

      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # Move over to the tray after heating
      G1 X{purge_x} F{travel_spd_xy}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
      {% set purge_per_blob = purge_len|float / blobs %}
      {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
      {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
      {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
      {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
      {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
      {% set pulse_duration = purge_per_pulse / purge_spd %}

      # Repeat the process until purge_len is reached
      {% for blob in range(blobs) %}
        RESPOND MSG={"'RPMR: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

        G1 Z{rpm_z_clearance} F{travel_spd_z}


        # relative extrusion
        M83

        # Purge filament in a pulsating motion to purge the filament quicker and better
        {% for pulse in range(pulses_per_blob) %}
          # Calculations to determine e-speed
          # simplified Blobifier equation without variable z motion
          {% set speed = purge_per_pulse / purge_length_maximum / pulse_duration %}

          # Purge quickly
          G1 E{purge_per_pulse * 0.95} F{speed * 0.95}
          # Purge a tiny bit slowly
          G1 E{purge_per_pulse * 0.05} F{speed * 0.05}

          # retract and unretract filament every now and then for thorough cleaning
          {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
            G1 E-2 F1800
            G1 E2 F800
          {% endif %}
          
        {% endfor %}

        # Retract to match what Happy Hare is expecting
        G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}
        
        # ==================================================================================
        # ==================== DEPOSIT BLOB ================================================
        # ==================================================================================

        G4 P{pressure_release_time}
        RPMR_FLICK # N defaults to 1, coincides with name

        # Keep track of the # of blobs
        _RPMR_COUNT
      {% endfor %}
    {% endif %}

    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================
    G90 # absolute positioning
    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}
  
  RESTORE_GCODE_STATE NAME=RPMR_state 


##########################################################################################
# Wipes the nozzle on whatever is pinched between cage and arm, and flicks the blob
#
[gcode_macro RPMR_CLEAN]
gcode:
  {% set rpmr = printer['gcode_macro RPMR'] %}
  
  SAVE_GCODE_STATE NAME=RPMR_CLEAN_state
  
  RPMR_FLICK N={rpmr.flick_qty}

  RESTORE_GCODE_STATE NAME=RPMR_CLEAN_state


##########################################################################################
# Flicks with the RPMR N times
[gcode_macro RPMR_FLICK]
gcode:
  {% set rpmr = printer['gcode_macro RPMR'] %}
  {% set original_accel = printer.toolhead.max_accel %}
  {% set original_minimum_cruise_ratio = printer.toolhead.minimum_cruise_ratio %}
  {% set pos = printer.gcode_move.gcode_position %}
  {% set restore_z = [printer['gcode_macro RPMR_PARK'].restore_z,pos.z]|max %}
  {% set n_flicks = params.N|default(1)|int %}

  {% if rpmr.flick_accel > 0 %}
    SET_VELOCITY_LIMIT ACCEL={rpmr.flick_accel} MINIMUM_CRUISE_RATIO=0.1
  {% endif %}

  # TODO z top check
  {% if pos.z < rpmr.rpm_z_clearance %}
    G91
    G1 Z{rpmr.rpm_z_clearance} F{rpmr.travel_spd_z}
    G90
  {% else %}
    G90
  {% endif %}

  {% if pos.x > 252 %}
    {% set cross = 0 %}
    G1 X{rpmr.flick_x} F{rpmr.flick_spd_xy}
  {% else %}
    {% set cross = 1 %}
    G1 X{rpmr.flick_x} F{rpmr.travel_spd_xy}
  {% endif %}

  SET_VELOCITY_LIMIT ACCEL={original_accel} MINIMUM_CRUISE_RATIO={original_minimum_cruise_ratio}
  
  # Perform flicks
  {% for flicks in range(1, (n_flicks + cross)) %}
    G1 X{rpmr.purge_x} F{rpmr.travel_spd_xy}
    G4 P{rpmr.flick_dwell_time}
    G1 X{rpmr.flick_x} F{rpmr.flick_spd_x}
  {% endfor %}
  
  G1 Z{restore_z} F{rpmr.travel_spd_z}

##########################################################################################
# Park the nozzle on the RPMR to catch oozing during filament swaps. Place this 
# extension in the post_form_tip extension in mmu_macro_vars.cfg:
#   variable_user_post_form_tip_extension: "RPMR_PARK"
#
[gcode_macro RPMR_PARK]
variable_restore_z: 0
gcode:
  {% set rpmr = printer['gcode_macro RPMR'] %}
  {% set pos = printer.gcode_move.gcode_position %}

  SET_GCODE_VARIABLE MACRO=RPMR_PARK VARIABLE=restore_z VALUE={pos.z}

  SAVE_GCODE_STATE NAME=rpmr_park_state
  
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    {% if pos.z < rpmr.rpm_z_clearance %}
      G91
      G1 Z{rpmr.rpm_z_clearance} F{rpmr.travel_spd_z}
      G90
    {% endif %}
    G1 X{rpmr.purge_x} F{rpmr.travel_spd_xy}

  {% else %}
    RESPOND MSG="Please home before parking"
  {% endif %}

  RESTORE_GCODE_STATE NAME=rpmr_park_state

##########################################################################################
# Increment the blob count with 1.
#
[gcode_macro _RPMR_COUNT]
# Don't change these variables
variable_current_blobs: 0
gcode:
  {% set rpmr = printer['gcode_macro RPMR'] %}
  {% set count = printer['gcode_macro _RPMR_COUNT'] %}
    SET_GCODE_VARIABLE MACRO=_RPMR_COUNT VARIABLE=current_blobs VALUE={current_blobs + 1}
    _RPMR_SAVE_STATE
    {action_respond_info(
      "RPMR: Blobs in bucket: %s." 
      % (current_blobs + 1)
    )}

##########################################################################################
# Reset the blob count to 0
#
[gcode_macro _RPMR_COUNT_RESET]
gcode:
  SET_GCODE_VARIABLE MACRO=_RPMR_COUNT VARIABLE=current_blobs VALUE=0
  _RPMR_SAVE_STATE

##########################################################################################
# Some sanity checks
#
[delayed_gcode RPMR_INIT]
initial_duration: 5.0
gcode:
  _RPMR_INIT

[gcode_macro _RPMR_INIT]
gcode:
  {% set rpmr = printer['gcode_macro RPMR'] %}

  # Valid part cooling fan setting
  {% if rpmr.part_cooling_fan != -1 and (rpmr.part_cooling_fan < 0 or rpmr.part_cooling_fan > 1) %}
    {action_emergency_stop("RPMR: Value %f is invalid for variable part_cooling_fan. Either -1 or a value from 0 .. 1 is valid." % (rpmr.part_cooling_fan))}
  {% endif %}

  # Check if position is on 'next'
  {% if printer.mmu %}
    {% if printer['gcode_macro _MMU_SEQUENCE_VARS'].restore_xy_pos != 'next' %}
      {action_respond_info("RPMR: If not using a wipe tower, consider setting restore_xy_pos: 'next' in mmu_macro_vars.cfg")}
    {% endif %}
  {% endif %}
 
[delayed_gcode RPMR_LOAD_STATE]
initial_duration: 2.0 # Give it some time to boot up
gcode:
  {% set sv = printer.save_variables.variables.rpmreborn %}

  {% if sv %}
    # Restore state
    SET_GCODE_VARIABLE MACRO=_RPMR_COUNT VARIABLE=current_blobs VALUE={sv.current_blobs}
  {% endif %}

[gcode_macro _RPMR_SAVE_STATE]
gcode:
  {% set count = printer['gcode_macro _RPMR_COUNT'] %}
  {% set sv = {'current_blobs': count.current_blobs} %}
  SAVE_VARIABLE VARIABLE=rpmreborn VALUE="{sv}"